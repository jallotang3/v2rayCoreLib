name: Build Cross-Platform Libraries

on:
  push:
    branches: [master, main, v*]
    paths:
      - "bind/**"
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build-libraries.yml"
  pull_request:
    branches: [master, main]
    paths:
      - "bind/**"
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build-libraries.yml"
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows DLL
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Set up MinGW
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc

      - name: Build Windows DLL (x64)
        run: |
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:PATH = "C:\msys64\mingw64\bin;$env:PATH"
          cd bind/desktop
          go build -buildmode=c-shared -o v2ray-amd64.dll main.go
        shell: powershell

      - name: Build Windows DLL (x86)
        run: |
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          $env:GOARCH = "386"
          $env:PATH = "C:\msys64\mingw32\bin;$env:PATH"
          cd bind/desktop
          go build -buildmode=c-shared -o v2ray-386.dll main.go
        shell: powershell

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-libraries
          path: |
            bind/desktop/v2ray-*.dll
            bind/desktop/v2ray.h

  build-macos:
    name: Build macOS dylib
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Build macOS dylib
        run: |
          cd bind/desktop
          chmod +x build_macos.sh
          ./build_macos.sh

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-libraries
          path: |
            bind/desktop/v2ray*.dylib
            bind/desktop/v2ray.h

  build-android:
    name: Build Android AAR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: false

      - name: Install gomobile
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Build Android AAR (ARM64)
        run: |
          cd bind/mobile
          export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
          export CGO_ENABLED=1
          export GOOS=android
          export GOARCH=arm64
          export CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang
          export CXX=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++
          gomobile bind -target=android/arm64 -o v2ray-arm64.aar .

      - name: Build Android AAR (AMD64)
        run: |
          cd bind/mobile
          export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
          export CGO_ENABLED=1
          export GOOS=android
          export GOARCH=amd64
          export CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang
          export CXX=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang++
          gomobile bind -target=android/amd64 -o v2ray-amd64.aar .

      - name: Build Android AAR (Universal)
        run: |
          cd bind/mobile
          export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
          gomobile bind -target=android -o v2ray.aar .

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-libraries
          path: |
            bind/mobile/v2ray*.aar

  build-ios:
    name: Build iOS XCFramework
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Install gomobile
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

      - name: Build iOS Framework (ARM64)
        run: |
          cd bind/mobile
          export CGO_ENABLED=1
          gomobile bind -target=ios/arm64 -o V2Ray-arm64.framework .

      - name: Build iOS Framework (AMD64 Simulator)
        run: |
          cd bind/mobile
          export CGO_ENABLED=1
          gomobile bind -target=ios/amd64 -o V2Ray-amd64.framework .

      - name: Build iOS Framework (Universal)
        run: |
          cd bind/mobile
          export CGO_ENABLED=1
          gomobile bind -target=ios -o V2Ray.framework .

      - name: Create XCFramework
        run: |
          cd bind/mobile
          xcodebuild -create-xcframework \
            -framework V2Ray-arm64.framework \
            -framework V2Ray-amd64.framework \
            -output V2Ray.xcframework

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-libraries
          path: |
            bind/mobile/V2Ray*.framework
            bind/mobile/V2Ray.xcframework

  create-release-package:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-android, build-ios]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release package structure
        run: |
          mkdir -p release-package/windows
          mkdir -p release-package/macos
          mkdir -p release-package/android
          mkdir -p release-package/ios
          mkdir -p release-package/docs

      - name: Organize artifacts
        run: |
          # Windows
          cp artifacts/windows-libraries/* release-package/windows/ || true
          
          # macOS
          cp artifacts/macos-libraries/* release-package/macos/ || true
          
          # Android
          cp artifacts/android-libraries/* release-package/android/ || true
          
          # iOS
          cp -r artifacts/ios-libraries/* release-package/ios/ || true
          
          # Documentation
          cp bind/desktop/README.md release-package/docs/desktop-README.md
          cp bind/mobile/README.md release-package/docs/mobile-README.md

      - name: Create release archive
        run: |
          cd release-package
          zip -r ../v2ray-libraries-${{ github.event.release.tag_name }}.zip .
          cd ..
          
          # Create checksums
          sha256sum v2ray-libraries-${{ github.event.release.tag_name }}.zip > v2ray-libraries-${{ github.event.release.tag_name }}.zip.sha256

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            v2ray-libraries-${{ github.event.release.tag_name }}.zip
            v2ray-libraries-${{ github.event.release.tag_name }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-artifacts:
    name: Upload Build Artifacts
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-android, build-ios]
    if: github.event_name != 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create combined artifact
        run: |
          mkdir -p combined-libraries/windows
          mkdir -p combined-libraries/macos
          mkdir -p combined-libraries/android
          mkdir -p combined-libraries/ios
          
          # Copy all artifacts to combined directory
          cp artifacts/windows-libraries/* combined-libraries/windows/ || true
          cp artifacts/macos-libraries/* combined-libraries/macos/ || true
          cp artifacts/android-libraries/* combined-libraries/android/ || true
          cp -r artifacts/ios-libraries/* combined-libraries/ios/ || true

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v2ray-cross-platform-libraries
          path: combined-libraries/
          retention-days: 30
