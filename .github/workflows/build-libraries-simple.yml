name: Build Cross-Platform Libraries

on:
  push:
    branches: [master, main, v*]
    paths:
      - "bind/**"
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build-libraries*.yml"
  pull_request:
    branches: [master, main]
    paths:
      - "bind/**"
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build-libraries*.yml"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      build_desktop:
        description: 'Build desktop libraries'
        required: false
        default: true
        type: boolean
      build_mobile:
        description: 'Build mobile libraries'
        required: false
        default: true
        type: boolean

env:
  GO_VERSION: '1.21'
  ANDROID_API: 29
  NDK_VERSION: r26
  CGO_ENABLED: 1

jobs:
  # 准备阶段 - 下载依赖和设置环境
  prepare:
    name: Prepare Build Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('bind/**/*.go') }}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Download dependencies
        run: go mod download

  # Windows 构建 - 使用矩阵构建
  build-windows:
    name: Build Windows DLL (${{ matrix.arch }})
    runs-on: windows-latest
    needs: prepare
    if: ${{ github.event.inputs.build_desktop != 'false' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
            ~\go\bin
          key: ${{ needs.prepare.outputs.cache-key }}-windows
          restore-keys: |
            ${{ needs.prepare.outputs.cache-key }}-

      - name: Download dependencies
        run: go mod download

      - name: Set up MinGW for CGO
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-libs

      - name: Build Windows DLL (${{ matrix.arch }})
        shell: powershell
        timeout-minutes: 15
        run: |
          cd bind/desktop
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.arch }}"
          $outputName = "v2ray-${{ matrix.arch }}-windows-${{ matrix.arch }}.dll"
          Write-Host "Building $outputName..."
          go build -trimpath -ldflags="-w -s" -buildmode=c-shared -o $outputName main.go
          
          if (!(Test-Path $outputName)) {
            Write-Error "Build failed: $outputName not found"
            exit 1
          }
          
          $size = [math]::Round((Get-Item $outputName).Length / 1MB, 2)
          Write-Host "✅ $outputName built successfully ($size MB)"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-library
          path: |
            bind/desktop/v2ray-${{ matrix.arch }}-windows-${{ matrix.arch }}.dll
            bind/desktop/v2ray.h
          retention-days: 30

  # macOS 构建 - 使用矩阵构建
  build-macos:
    name: Build macOS dylib (${{ matrix.arch }})
    runs-on: macos-latest
    needs: prepare
    if: ${{ github.event.inputs.build_desktop != 'false' }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ needs.prepare.outputs.cache-key }}-macos
          restore-keys: |
            ${{ needs.prepare.outputs.cache-key }}-

      - name: Download dependencies
        run: go mod download

      - name: Build macOS dylib (${{ matrix.arch }})
        timeout-minutes: 15
        run: |
          cd bind/desktop
          export CGO_ENABLED=1
          export GOOS=darwin
          export GOARCH=${{ matrix.arch }}
          outputName="v2ray-${{ matrix.arch }}-darwin-${{ matrix.arch }}.dylib"
          echo "Building $outputName..."
          go build -trimpath -ldflags="-w -s" -buildmode=c-shared -o $outputName main.go
          
          if [ ! -f "$outputName" ]; then
            echo "❌ Build failed: $outputName not found"
            exit 1
          fi
          
          size=$(du -h "$outputName" | cut -f1)
          echo "✅ $outputName built successfully ($size)"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-library
          path: |
            bind/desktop/v2ray-${{ matrix.arch }}-darwin-${{ matrix.arch }}.dylib
            bind/desktop/v2ray.h
          retention-days: 30

  # 创建 macOS 通用二进制
  create-macos-universal:
    name: Create macOS Universal Binary
    runs-on: macos-latest
    needs: [prepare, build-macos]
    if: ${{ github.event.inputs.build_desktop != 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Universal Binary
        run: |
          mkdir -p bind/desktop
          cp artifacts/macos-amd64-library/v2ray-amd64-darwin-amd64.dylib bind/desktop/
          cp artifacts/macos-arm64-library/v2ray-arm64-darwin-arm64.dylib bind/desktop/
          cp artifacts/macos-amd64-library/v2ray.h bind/desktop/
          
          cd bind/desktop
          lipo -create -output v2ray.dylib v2ray-amd64-darwin-amd64.dylib v2ray-arm64-darwin-arm64.dylib
          echo "✅ Universal binary created successfully"
          file v2ray.dylib
          lipo -info v2ray.dylib
          
          echo "File sizes:"
          du -h v2ray*.dylib

      - name: Upload Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-library
          path: |
            bind/desktop/v2ray.dylib
            bind/desktop/v2ray.h
          retention-days: 30

  # Android 构建 - 使用矩阵构建
  build-android:
    name: Build Android AAR (${{ matrix.target }})
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ github.event.inputs.build_mobile != 'false' }}
    strategy:
      fail-fast: false
      matrix:
        target: [arm64, amd64, universal]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ needs.prepare.outputs.cache-key }}-android
          restore-keys: |
            ${{ needs.prepare.outputs.cache-key }}-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26
          add-to-path: false
          local-cache: true

      - name: Install gomobile
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          go get golang.org/x/mobile/bind
          gomobile init

      - name: Build Android AAR (${{ matrix.target }})
        timeout-minutes: 25
        run: |
          cd bind/mobile
          export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
          export CGO_ENABLED=1
          export ANDROID_API=29
          
          if [ "${{ matrix.target }}" = "universal" ]; then
            target="android"
            outputName="v2ray.aar"
          else
            target="android/${{ matrix.target }}"
            outputName="v2ray-${{ matrix.target }}.aar"
          fi
          
          echo "Building $outputName for target $target..."
          gomobile bind -target=$target -trimpath -ldflags="-w -s" -androidapi=$ANDROID_API -o $outputName -javapkg cn.jallotang main.go
          
          if [ ! -f "$outputName" ]; then
            echo "❌ Build failed: $outputName not found"
            exit 1
          fi
          
          size=$(du -h "$outputName" | cut -f1)
          echo "✅ $outputName built successfully ($size)"

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.target }}-library
          path: |
            bind/mobile/v2ray*.aar
          retention-days: 30

  # iOS 构建
  build-ios:
    name: Build iOS XCFramework
    runs-on: macos-latest
    needs: prepare
    if: ${{ github.event.inputs.build_mobile != 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
          cache-dependency-path: ./go.sum

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ needs.prepare.outputs.cache-key }}-ios
          restore-keys: |
            ${{ needs.prepare.outputs.cache-key }}-

      - name: Download dependencies
        run: go mod download

      - name: Install gomobile
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          go get golang.org/x/mobile/bind
          gomobile init

      - name: Build iOS Framework (Universal)
        timeout-minutes: 20
        run: |
          cd bind/mobile
          export CGO_ENABLED=1
          echo "Building iOS XCFramework..."
          gomobile bind -target=ios -trimpath -ldflags="-w -s" -o V2Ray.xcframework main.go
          
          if [ ! -d "V2Ray.xcframework" ]; then
            echo "❌ Build failed: V2Ray.xcframework not found"
            exit 1
          fi
          
          size=$(du -sh "V2Ray.xcframework" | cut -f1)
          echo "✅ V2Ray.xcframework built successfully ($size)"

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-library
          path: |
            bind/mobile/V2Ray.xcframework
          retention-days: 30

  # 创建发布包
  create-release-package:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, create-macos-universal, build-android, build-ios]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release package structure
        run: |
          mkdir -p release-package/windows
          mkdir -p release-package/macos
          mkdir -p release-package/android
          mkdir -p release-package/ios
          mkdir -p release-package/docs

      - name: Organize artifacts
        run: |
          # Windows
          cp artifacts/windows-*/v2ray-*.dll release-package/windows/ || true
          cp artifacts/windows-*/v2ray.h release-package/windows/ || true
          
          # macOS
          cp artifacts/macos-universal-library/v2ray.dylib release-package/macos/ || true
          cp artifacts/macos-*/v2ray-*.dylib release-package/macos/ || true
          cp artifacts/macos-*/v2ray.h release-package/macos/ || true
          
          # Android
          cp artifacts/android-*/v2ray*.aar release-package/android/ || true
          
          # iOS
          cp -r artifacts/ios-library/V2Ray.xcframework release-package/ios/ || true
          
          # Documentation
          cp bind/desktop/README.md release-package/docs/desktop-README.md || true
          cp bind/mobile/README.md release-package/docs/mobile-README.md || true

      - name: Create release archive
        run: |
          cd release-package
          zip -r ../v2ray-libraries-${{ github.event.release.tag_name }}.zip .
          cd ..
          
          # Create checksums
          sha256sum v2ray-libraries-${{ github.event.release.tag_name }}.zip > v2ray-libraries-${{ github.event.release.tag_name }}.zip.sha256

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            v2ray-libraries-${{ github.event.release.tag_name }}.zip
            v2ray-libraries-${{ github.event.release.tag_name }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 上传构建产物
  upload-artifacts:
    name: Upload Build Artifacts
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, create-macos-universal, build-android, build-ios]
    if: github.event_name != 'release'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create combined artifact
        run: |
          mkdir -p combined-libraries/windows
          mkdir -p combined-libraries/macos
          mkdir -p combined-libraries/android
          mkdir -p combined-libraries/ios
          
          # Copy all artifacts to combined directory
          cp artifacts/windows-*/v2ray-*.dll combined-libraries/windows/ || true
          cp artifacts/windows-*/v2ray.h combined-libraries/windows/ || true
          
          cp artifacts/macos-universal-library/v2ray.dylib combined-libraries/macos/ || true
          cp artifacts/macos-*/v2ray-*.dylib combined-libraries/macos/ || true
          cp artifacts/macos-*/v2ray.h combined-libraries/macos/ || true
          
          cp artifacts/android-*/v2ray*.aar combined-libraries/android/ || true
          
          cp -r artifacts/ios-library/V2Ray.xcframework combined-libraries/ios/ || true

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v2ray-cross-platform-libraries
          path: combined-libraries/
          retention-days: 30
